"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Fixed Gear Perm.
"""

from aiogram import types
from aiogram.fsm.context import FSMContext
import logging

from ..bot import bot, dp
from ..states import AdStates
from ..keyboards import get_category_keyboard, get_photos_done_keyboard, get_review_keyboard, get_moderation_keyboard, get_error_keyboard, get_start_keyboard, get_create_new_ad_keyboard
from ..utils import (
    format_price, get_user_mention, get_user_display, 
    create_ad_text, create_media_group, get_category_name
)
from ..config import MODERATION_CHAT_ID
from ..database import db

def register_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    :param dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    # –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    dp.callback_query.register(create_ad, lambda c: c.data == "create_ad")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dp.callback_query.register(process_category, lambda c: c.data.startswith("category_"))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    dp.message.register(process_photo, AdStates.waiting_for_photos, lambda message: message.photo)
    dp.callback_query.register(photos_done, AdStates.waiting_for_photos, lambda c: c.data == "photos_done")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    dp.callback_query.register(go_to_start, lambda c: c.data == "start_command")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã
    dp.message.register(process_title, AdStates.waiting_for_title)
    dp.message.register(process_description, AdStates.waiting_for_description)
    dp.message.register(process_price, AdStates.waiting_for_price)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    dp.callback_query.register(send_to_moderation, AdStates.review, lambda c: c.data == "send_to_moderation")

async def create_ad(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã—Å—Ç–∞–≤–∏—Ç—å –≤–µ–ª–æ—Ç–æ–≤–∞—Ä –Ω–∞ –æ–±–æ–∑—Ä–µ–Ω–∏–µ"
    
    :param callback: –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await callback.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.message.answer(
        "üìã <b>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>\n\n"
        "<i>–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</i>",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.set_state(AdStates.waiting_for_category)

async def process_category(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    :param callback: –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_code = callback.data.split("_")[1]
    category_name = get_category_name(category_code)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(category=category_code)
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await state.update_data(photos=[])
    
    await callback.message.answer(
        f"üì∏ <b>–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{category_name}</code>\n\n"
        "<i>–ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É (–¥–æ 3-—Ö —à—Ç—É–∫). –•–æ—Ä–æ—à–∏–µ —Ñ–æ—Ç–æ = –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–¥–∞–∂–∞!</i>",
        reply_markup=get_photos_done_keyboard(),
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await state.set_state(AdStates.waiting_for_photos)

async def process_photo(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    data = await state.get_data()
    photos = data.get("photos", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –Ω–µ –±–æ–ª—å—à–µ 3-—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if len(photos) >= 3:
        await message.answer("<b>–•–≤–∞—Ç–∏—Ç —Ñ–æ—Ç–æ!</b> üì∏\n<i>–ù–∞–∂–º–∏ '–î–∞–ª—å—à–µ'.</i>", parse_mode="HTML")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_id = message.photo[-1].file_id
    photos.append(photo_id)
    await state.update_data(photos=photos)
    
    await message.answer(
        f"üëç <b>–§–æ—Ç–æ {len(photos)}/3</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n<i>–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–ª–∏ –Ω–∞–∂–º–∏ '–î–∞–ª—å—à–µ'.</i>", 
        reply_markup=get_photos_done_keyboard(),
        parse_mode="HTML"
    )

async def photos_done(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ" –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    
    :param callback: –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await callback.answer()
    
    data = await state.get_data()
    photos = data.get("photos", [])
    
    if not photos:
        await callback.message.answer("‚ö†Ô∏è <b>–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!</b>\n<i>–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.</i>", parse_mode="HTML")
        return
    
    await callback.message.answer(
        "‚úèÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "<i>–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).</i>\n\n"
        "üí° <u>–ù–∞–ø—Ä–∏–º–µ—Ä:</u> <code>–°–µ–¥–ª–æ Brooks B17</code> –∏–ª–∏ <code>–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Shimano XT</code>",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    await state.set_state(AdStates.waiting_for_title)

async def process_title(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    if len(message.text) > 50:
        await message.answer("‚ùå <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ!</b>\n<i>–°–æ–∫—Ä–∞—Ç–∏ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.</i>", reply_markup=get_error_keyboard(), parse_mode="HTML")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await state.update_data(title=message.text)
    
    await message.answer(
        "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
        "<i>–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–≤–∞—Ä–µ: —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.</i>\n\n"
        "üí≠ <u>–°–æ–≤–µ—Ç:</u> –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º - —ç—Ç–æ —Ü–µ–Ω–∏—Ç—Å—è –±–æ–ª—å—à–µ –ø—Ä–∏—É–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è.\n\n"
        "üìè <code>–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤</code>",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    await state.set_state(AdStates.waiting_for_description)

async def process_description(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    if len(message.text) > 500:
        await message.answer("‚ùå <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!</b>\n<i>–°–æ–∫—Ä–∞—Ç–∏ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.</i>", reply_markup=get_error_keyboard(), parse_mode="HTML")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(description=message.text)
    
    await message.answer(
        "üí∞ <b>–¶–µ–Ω–∞</b>\n\n"
        "<i>–£–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏</i> <code>–î–∞—Ä–æ–º</code>",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
    await state.set_state(AdStates.waiting_for_price)

async def process_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    price_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        formatted_price = format_price(price_text)
    except ValueError:
        await message.answer("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã!</b>\n<i>–í–≤–µ–¥–∏ —á–∏—Å–ª–æ</i> (<code>5000</code>) <i>–∏–ª–∏</i> <code>–î–∞—Ä–æ–º</code>", reply_markup=get_error_keyboard(), parse_mode="HTML")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_mention = get_user_mention(message.from_user)
    user_display = get_user_display(message.from_user)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
    logger = logging.getLogger(__name__)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={message.from_user.id}, username={message.from_user.username}")
    
    await state.update_data(
        price=formatted_price,
        user_id=message.from_user.id,
        user_mention=user_mention,
        user_display=user_display
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    preview_text = create_ad_text(data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not message.from_user.username:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username: ID={message.from_user.id}")
        await message.answer(
            "‚ö†Ô∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç @username!</b>\n\n"
            "<i>–ë–µ–∑ username –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π.</i>\n\n"
            "üõ† <u>–†–µ—à–µ–Ω–∏–µ:</u> —Å–æ–∑–¥–∞–π <code>@username</code> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏–ª–∏ —É–∫–∞–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.",
            parse_mode="HTML"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
    photos = data['photos']
    if photos:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
        media_group = create_media_group(photos, preview_text, "HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        await message.answer_media_group(media=media_group)
    
    await message.answer(
        "üëÄ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</b>\n\n"
        "<i>–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ.</i> –ï—Å–ª–∏ –¥–∞ - <u>–æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</u> üöÄ",
        reply_markup=get_review_keyboard(),
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await state.set_state(AdStates.review)

async def send_to_moderation(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    
    :param callback: –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = data.get("user_id")
    user = callback.from_user
    logger = logging.getLogger(__name__)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: ID={user.id}, username={user.username}")
    
    if not user.username:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: ID={user.id}")
        await callback.message.answer(
            "‚ö†Ô∏è <b>–ù–µ—Ç @username!</b>\n\n"
            "<i>–°–æ–∑–¥–∞–π</i> <code>@username</code> <i>–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏–ª–∏ —É–∫–∞–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.</i>",
            parse_mode="HTML"
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    post_data = {
        "user_id": data["user_id"],
        "category": data.get("category", "sell"),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        "photos": data["photos"],
        "title": data["title"],
        "description": data["description"],
        "price": data["price"],
        "user_mention": data["user_mention"],
        "user_display": data["user_display"]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    ad_id = db.save_moderation_ad(data['user_id'], post_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    mod_text = create_ad_text(data, is_moderation=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    photos = data.get('photos') or []
    if photos:
        media_group = create_media_group(photos, mod_text, "HTML")
        await bot.send_media_group(chat_id=MODERATION_CHAT_ID, media=media_group)

    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await bot.send_message(
        chat_id=MODERATION_CHAT_ID,
        text="üß† <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>",
        reply_markup=get_moderation_keyboard(ad_id),
        parse_mode="HTML"
    )
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    await callback.message.answer(
        "‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>\n\n"
        "<i>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç —Ç–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.</i> ‚è∞ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ <code>24 —á–∞—Å–æ–≤</code>.\n\n"
        "–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
        reply_markup=get_create_new_ad_keyboard(),
        parse_mode="HTML"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()

async def go_to_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    :param callback: –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.message.edit_text(
        "üé≠ <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>FGP_MIXEDBARAHOLKA</b>!\n\n"
        "<i>–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –≤–µ—â–∏ –∏ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.</i>",
        reply_markup=get_start_keyboard(),
        parse_mode="HTML"
    ) 