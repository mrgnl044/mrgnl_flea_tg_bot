"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Fixed Gear Perm.
"""

import logging
from aiogram import types

from ..bot import bot
from ..config import CHANNEL_ID
from ..keyboards import get_error_keyboard
from ..database import db

logger = logging.getLogger(__name__)

def register_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥—É–ª—è
    
    :param dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞–Ω–æ"
    dp.callback_query.register(mark_as_sold, lambda c: c.data.startswith("sold_"))

async def mark_as_sold(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–æ–≤–∞—Ä –æ–±—Ä—ë–ª –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞"
    
    :param callback: –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    """
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏–∑ callback_data
    message_id = int(callback.data.split("_")[1])
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id FROM published_ads 
            WHERE channel_message_id = ? AND status = 'active'
        """, (message_id,))
        row = cursor.fetchone()
        
        if not row:
            await callback.message.edit_text(
                "‚ùå <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω–æ.</b>",
                reply_markup=None,
                parse_mode="HTML"
            )
            return
        
        ad_id = row['id']
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±: –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ forward_message
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (disable_notification=True —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
            forwarded_msg = await bot.forward_message(
                chat_id=callback.from_user.id,
                from_chat_id=CHANNEL_ID,
                message_id=message_id,
                disable_notification=True
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å—å
            current_caption = forwarded_msg.caption or ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–æ
            if "üî¥ –û–ë–†–ï–õ–û –ù–û–í–û–ì–û –í–õ–ê–î–ï–õ–¨–¶–ê" in current_caption:
                # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.delete_message(
                    chat_id=callback.from_user.id,
                    message_id=forwarded_msg.message_id
                )
                await callback.message.edit_text(
                    "‚ÑπÔ∏è <i>–£–∂–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–æ.</i>",
                    reply_markup=None,
                    parse_mode="HTML"
                )
                return
            
            # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.delete_message(
                chat_id=callback.from_user.id,
                message_id=forwarded_msg.message_id
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ü–†–û–î–ê–ù–û
            new_caption = f"{current_caption}\n\nüî¥ –û–ë–†–ï–õ–û –ù–û–í–û–ì–û –í–õ–ê–î–ï–õ–¨–¶–ê"
            
            await bot.edit_message_caption(
                chat_id=CHANNEL_ID,
                message_id=message_id,
                caption=new_caption,
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.message.edit_text(
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ–¥–∞–∂–µ–π!</b>\n\n"
                "<i>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫</i> <u>¬´–ü—Ä–æ–¥–∞–Ω–æ¬ª</u>.",
                reply_markup=None,
                parse_mode="HTML"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db.mark_ad_as_sold(ad_id, callback.from_user.id)
            
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id} (—Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}) –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
            
        except Exception as forward_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ forward: {forward_error}")
            
            # Fallback: –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            try:
                await bot.edit_message_caption(
                    chat_id=CHANNEL_ID,
                    message_id=message_id,
                    caption="üî¥ –û–ë–†–ï–õ–û –ù–û–í–û–ì–û –í–õ–ê–î–ï–õ–¨–¶–ê",
                    parse_mode="HTML"
                )
                
                await callback.message.edit_text(
                    "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ–¥–∞–∂–µ–π!</b>\n\n"
                    "<i>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫</i> <u>¬´–ü—Ä–æ–¥–∞–Ω–æ¬ª</u>.",
                    reply_markup=None,
                    parse_mode="HTML"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                db.mark_ad_as_sold(ad_id, callback.from_user.id)
                
                logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id} (—Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}) –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–æ (fallback)")
                
            except Exception as fallback_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ fallback –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {message_id}: {fallback_error}")
                await callback.message.reply(
                    "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.</b>\n<i>–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>",
                    reply_markup=get_error_keyboard(),
                    parse_mode="HTML"
                )
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        await callback.message.reply(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</b>\n<i>–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>",
            reply_markup=get_error_keyboard(),
            parse_mode="HTML"
        ) 